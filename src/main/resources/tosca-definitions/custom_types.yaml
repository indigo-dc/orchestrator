tosca_definitions_version: tosca_simple_yaml_1_0

template_name: indigo_custom_types
template_version: 1.0.0-SNAPSHOT

capability_types:

  tosca.capabilities.indigo.OperatingSystem:
    derived_from: tosca.capabilities.OperatingSystem
    properties:
      gpu:
        type: boolean
        required: no
      image:
        type: string
        required: no
      credential:
        type: tosca.datatypes.Credential
        required: no

  tosca.capabilities.indigo.Scalable:
    derived_from: tosca.capabilities.Scalable
    properties:
      min_instances:
        type: integer
        default: 1
        required: no
      max_instances:
        type: integer
        default: 1
        required: no
      count:
        type: integer
        description: the number of resources
        required: no
        default: 1
      removal_list:
        type: list
        description: list of IDs of the resources to be removed
        required: no
        entry_schema:
          type: string

  tosca.capabilities.indigo.Container:
    derived_from: tosca.capabilities.Container
    properties:
      instance_type:
        type: string
        required: no

  tosca.capabilities.indigo.LRMS:
    derived_from: tosca.capabilities.Container
    properties:
      type:
        type: string
        required: true
        constraints:
        - valid_values: [ local, torque, slurm, sge, condor, mesos ]

  tosca.capabilities.indigo.LRMS.Torque:
    derived_from: tosca.capabilities.indigo.LRMS
    properties:
      type:
        type: string
        required: true
        default: torque
        constraints:
          - equal: torque

  tosca.capabilities.indigo.LRMS.Slurm:
    derived_from: tosca.capabilities.indigo.LRMS
    properties:
      type:
        type: string
        required: true
        default: slurm
        constraints:
          - equal: slurm

  tosca.capabilities.indigo.LRMS.Local:
    derived_from: tosca.capabilities.indigo.LRMS
    properties:
      type:
        type: string
        required: true
        default: local
        constraints:
          - equal: local

  tosca.capabilities.indigo.LRMS.Mesos:
    derived_from: tosca.capabilities.indigo.LRMS
    properties:
      type:
        type: string
        required: true
        default: mesos
        constraints:
          - equal: mesos

  tosca.capabilities.indigo.MesosMaster:        
    derived_from: tosca.capabilities.Container

  tosca.capabilities.indigo.MesosSlave:
    derived_from: tosca.capabilities.Container

  tosca.capabilities.indigo.Container.Docker:
    derived_from: tosca.capabilities.Container.Docker
    properties:
      num_cpus:
        type: float
        required: false
        constraints:
          - greater_or_equal: 0.0

  tosca.capabilities.indigo.Endpoint:
    derived_from: tosca.capabilities.Endpoint
    properties:
      dns_name:
        description: The optional name to register with DNS
        type: string
        required: false
      private_ip:
        description: Flag used to specify that this endpoint will require also a private IP although it is a public one.
        type: boolean
        required: false
        default: true
    attributes:
      credential:
        type: list
        entry_schema:
          type: tosca.datatypes.Credential

  tosca.capabilities.indigo.Container.Application.Docker.Chronos:
    derived_from: tosca.capabilities.Root


artifact_types:

  tosca.artifacts.Implementation.YAML:
    derived_from: tosca.artifacts.Implementation
    description: YAML Ansible recipe artifact
    mime_type: text/yaml
    file_ext: [ yaml, yml ]

  tosca.artifacts.AnsibleGalaxy.role:
    derived_from: tosca.artifacts.Root
    description: Ansible Galaxy role to be deployed in the target node

relationship_types:

  tosca.relationships.indigo.Manages:
    derived_from: tosca.relationships.Root

node_types:

  # Standard types defined in TOSCA with interfaces to install

  tosca.nodes.Database.MySQL:
    derived_from: tosca.nodes.Database
    requirements:
      host:
        type: tosca.capabilities.Container
        relationship: tosca.relationships.HostedOn
        node: tosca.nodes.DBMS.MySQL
    interfaces:
      Standard:
        create:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_db_configure.yml
          inputs:
            db_password: { get_property: [ SELF, password ] }
            db_name: { get_property: [ SELF, name ] }
            db_user: { get_property: [ SELF, user ] }
            db_root_password: ""
            db_access_host: "%"

  tosca.nodes.DBMS.MySQL:
    derived_from: tosca.nodes.DBMS
    properties:
      port:
        type: integer
        description: reflect the default MySQL server port
        default: 3306
      root_password:
        type: string
        # MySQL requires a root_password for configuration
        required: true
    capabilities:
      # Further constrain the ‘host’ capability to only allow MySQL databases
      host:
        type: tosca.capabilities.Container
        valid_source_types: [ tosca.nodes.Database.MySQL ]
    interfaces:
      Standard:
        create: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_install.yml
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_configure.yml
          inputs:
            root_password: { get_property: [ SELF, root_password ] }
            port: { get_property: [ SELF, port ] }

  tosca.nodes.WebServer.Apache:
    derived_from: tosca.nodes.WebServer
    interfaces:
      Standard:
        create:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/apache/apache_install.yml
        start:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/apache/apache_start.yml

# INDIGO non normative types

  tosca.nodes.indigo.Database.MySQL:
    derived_from: tosca.nodes.Database.MySQL
    properties:
      access_host:
        type: string
        required: no
        default: "%"
      root_password:
        type: string
        required: true
    requirements:
      host:
        type: tosca.capabilities.Container
        relationship: tosca.relationships.HostedOn
        node: tosca.nodes.DBMS.MySQL
    interfaces:
      Standard:
        create:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_db_configure.yml
          inputs:
            db_password: { get_property: [ SELF, password ] }
            db_name: { get_property: [ SELF, name ] }
            db_user: { get_property: [ SELF, user ] }
            db_root_password: { get_property: [ SELF, root_password ] }
            db_access_host: { get_property: [ SELF, access_host ] }

  tosca.nodes.indigo.Compute:
    derived_from: tosca.nodes.indigo.MonitoredCompute
    attributes:
      private_address:
        type: list
        entry_schema:
          type: string
      public_address:
        type: list
        entry_schema:
          type: string
      ctxt_log:
        type: string
    capabilities:
      scalable:
        type: tosca.capabilities.indigo.Scalable
      os:
         type: tosca.capabilities.indigo.OperatingSystem
      endpoint:
        type: tosca.capabilities.indigo.Endpoint
      host:
        type: tosca.capabilities.indigo.Container
        valid_source_types: [tosca.nodes.SoftwareComponent]

  tosca.nodes.indigo.MonitoredCompute:
    derived_from: tosca.nodes.Compute
    properties:
      # Set the current data of the zabbix server
      # but it can also specified in the TOSCA document
      zabbix_server:
        type: string
        required: no
        default: orchestrator.cloud.cnaf.infn.it
      zabbix_server_port:
        type: integer
        required: no
        default: 10051
        constraints: 
          - in_range: [ 1, 65535 ]
      zabbix_server_metadata:
        type: string
        required: no
        default: Linux      668c875e-9a39-4dc0-a710-17c41376c1e0
    artifacts:
      zabbix_agent_role:
        file: indigo-dc.zabbix-agent
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/zabbix/zabbix_agent_install.yml
          inputs:
            zabbix_server: { get_property: [ SELF, zabbix_server ] }
            zabbix_server_port: { get_property: [ SELF, zabbix_server_port ] }
            zabbix_server_metadata: { get_property: [ SELF, zabbix_server_metadata ] }

  tosca.nodes.indigo.GalaxyPortal:
    derived_from: tosca.nodes.WebServer
    properties:
      admin_email:
        type: string
        description: email of the admin user
        default: admin@admin.com
        required: false
      admin_api_key:
        type: string
        description: key to access the API with admin role
        default: not_very_secret_api_key
        required: false
      user:
        type: string
        description: username to launch the galaxy daemon
        default: galaxy
        required: false
      install_path:
        type: string
        description: path to install the galaxy tool
        default: /home/galaxy/galaxy
        required: false
      export_dir:
        type: string
        description: path to store galaxy data
        default: /export
        required: false
      version:
        type: string
        description: galaxy version to install
        default: master
        required: false
      instance_description:
        type: string
        description: galaxy instance description
        default: "INDIGO Galaxy test"
      instance_key_pub:
        type: string
        description: galaxy instance ssh public key
        default: your_ssh_public_key
    requirements:
      lrms:
        type: tosca.capabilities.indigo.LRMS
        node: tosca.nodes.indigo.LRMS.FrontEnd
        relationship: tosca.relationships.HostedOn
    artifacts:
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
      galaxy_role:
        file: indigo-dc.galaxycloud
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_install.yml
          inputs:
            galaxy_install_path: { get_property: [ SELF, install_path ] }
            galaxy_user: { get_property: [ SELF, user ] }
            galaxy_admin: { get_property: [ SELF, admin_email ] }
            galaxy_admin_api_key: { get_property: [ SELF, admin_api_key ] }
            galaxy_lrms: { get_property: [ SELF, lrms, type ] }
            galaxy_version: { get_property: [ SELF, version ] }
            galaxy_instance_description: { get_property: [ SELF, instance_description ] }
            galaxy_instance_key_pub:  { get_property: [ SELF, instance_key_pub ] }
            export_dir: { get_property: [ SELF, export_dir ] }

  tosca.nodes.indigo.GalaxyPortalAndStorage:
    derived_from: tosca.nodes.indigo.GalaxyPortal
    properties:
      os_storage:
        type: string
        description: Storage type (Iaas Block Storage (default), Onedata, Filesystem encryption)
        default: "IaaS"
        required: true
      token:
        type: string
        description: Access token for onedata space
        default: "not_a_token"
        required: false
      provider:
        type: string
        description: default OneProvider
        default: "not_a_provider_url"
        required: false
      space:
        type: string
        description: Onedata space
        default: "galaxy"
        required: false
    artifacts:
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
      indigorepo_role:
        file: indigo-dc.galaxycloud-indigorepo
        type: tosca.artifacts.AnsibleGalaxy.role
      oneclient_role:
        file: indigo-dc.oneclient
        type: tosca.artifacts.AnsibleGalaxy.role
      galaxy_os_role:
        file: indigo-dc.galaxycloud-os
        type: tosca.artifacts.AnsibleGalaxy.role
      galaxy_role:
        file: indigo-dc.galaxycloud
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_os_install.yml
          inputs:
            os_storage: { get_property: [ SELF, os_storage ] }
            userdata_token: { get_property: [ SELF, token ] }
            userdata_oneprovider: { get_property: [ SELF, provider ] }
            userdata_space: { get_property: [ SELF, space ] }
            galaxy_install_path: { get_property: [ SELF, install_path ] }
            galaxy_user: { get_property: [ SELF, user ] }
            galaxy_admin: { get_property: [ SELF, admin_email ] }
            galaxy_admin_api_key: { get_property: [ SELF, admin_api_key ] }
            galaxy_lrms: { get_property: [ SELF, lrms, type ] }
            galaxy_version: { get_property: [ SELF, version ] }
            galaxy_instance_description: { get_property: [ SELF, instance_description ] }
            galaxy_instance_key_pub:  { get_property: [ SELF, instance_key_pub ] }
            export_dir: { get_property: [ SELF, export_dir ] }

  tosca.nodes.indigo.GalaxyPortalFastConfig:
    derived_from: tosca.nodes.indigo.GalaxyPortalAndStorage
    artifacts:
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
      indigorepo_role:
        file: indigo-dc.galaxycloud-indigorepo
        type: tosca.artifacts.AnsibleGalaxy.role
      oneclient_role:
        file: indigo-dc.oneclient
        type: tosca.artifacts.AnsibleGalaxy.role
      galaxy_os_role:
        file: indigo-dc.galaxycloud-os
        type: tosca.artifacts.AnsibleGalaxy.role
      galaxy_role-fastconfig:
        file: indigo-dc.galaxycloud-fastconfig
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_fastconfig.yml
          inputs:
            os_storage: { get_property: [ SELF, os_storage ] }
            userdata_token: { get_property: [ SELF, token ] }
            userdata_oneprovider: { get_property: [ SELF, provider ] }
            userdata_space: { get_property: [ SELF, space ] }
            galaxy_install_path: { get_property: [ SELF, install_path ] }
            galaxy_user: { get_property: [ SELF, user ] }
            galaxy_admin: { get_property: [ SELF, admin_email ] }
            galaxy_admin_api_key: { get_property: [ SELF, admin_api_key ] }
            galaxy_lrms: { get_property: [ SELF, lrms, type ] }
            galaxy_version: { get_property: [ SELF, version ] }
            galaxy_instance_description: { get_property: [ SELF, instance_description ] }
            galaxy_instance_key_pub:  { get_property: [ SELF, instance_key_pub ] }
            export_dir: { get_property: [ SELF, export_dir ] }
 
  tosca.nodes.indigo.GalaxyWN:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      front_end_ip:
        type: string
        description: IP of the Front-End node
        required: true
      export_dir:
        type: string
        description: path to store galaxy data
        default: /export
        required: true
    requirements:
      host:
        type: tosca.capabilities.Container
        node: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_wn_configure.yml
          inputs:
            galaxy_front_end_ip: { get_property: [ SELF, front_end_ip ] }
            export_dir: { get_property: [ SELF, export_dir ] }

  tosca.nodes.indigo.GalaxyWnToolDeps:
    derived_from: tosca.nodes.indigo.GalaxyWN
    properties:
      flavor:
        type: string
        description: name of the Galaxy flavor
        required: true
        default: galaxy-no-tools
      version:
        type: string
        description: galaxy version installed
        default: master
        required: false
    requirements:
      host:
        type: tosca.capabilities.Container
        node: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_wn_configure_tooldeps.yml
          inputs:
            galaxy_front_end_ip: { get_property: [ SELF, front_end_ip ] }
            export_dir: { get_property: [ SELF, export_dir ] }
            galaxy_flavor: { get_property: [ SELF, flavor ] }
            galaxy_version: { get_property: [ SELF, version ] }

  tosca.nodes.indigo.GalaxyWnCvmfsReferenceData:
    derived_from: tosca.nodes.indigo.GalaxyWnToolDeps
    properties:
      reference_data:
        type: boolean
        description: Install Reference data
        default: true
        required: true
      refdata_cvmfs_server_url:
        type: string
        description: CernVM-FS server, replica or stratum-zero
        default: 'server_url'
        required: false
      refdata_cvmfs_repository_name:
        type: string
        description: Reference data CernVM-FS repository name
        default: 'not_a_cvmfs_repository_name'
        required: false
      refdata_cvmfs_key_file:
        type: string
        description: CernVM-FS public key
        default: 'not_a_key'
        required: false
      refdata_cvmfs_proxy_url:
        type: string
        description: CernVM-FS proxy url
        default: 'DIRECT'
        required: false
      refdata_cvmfs_proxy_port:
        type: integer
        description: CernVM-FS proxy port
        default: 80
        required: false
      refdata_dir:
        type: string
        description: path to store galaxy reference data
        default: /refdata
        required: false
    requirements:
      host:
        type: tosca.capabilities.Container
        node: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_wn_configure_cvmfs.yml
          inputs:
            galaxy_front_end_ip: { get_property: [ SELF, front_end_ip ] }
            export_dir: { get_property: [ SELF, export_dir ] }
            galaxy_flavor: { get_property: [ SELF, flavor ] }
            galaxy_version: { get_property: [ SELF, version ] }
            get_refdata: { get_property: [ SELF, reference_data ] }
            refdata_cvmfs_server_url: { get_property: [ SELF, refdata_cvmfs_server_url ] }
            refdata_cvmfs_repository_name: { get_property: [ SELF, refdata_cvmfs_repository_name ] }
            refdata_cvmfs_key_file: { get_property: [ SELF, refdata_cvmfs_key_file ] }
            refdata_cvmfs_proxy_url: { get_property: [ SELF, refdata_cvmfs_proxy_url ] }
            refdata_cvmfs_proxy_port: { get_property: [ SELF, refdata_cvmfs_proxy_port ] }
            refdata_dir: { get_property: [ SELF, refdata_dir ] }

  tosca.nodes.indigo.GalaxyShedTool:
    derived_from: tosca.nodes.WebApplication
    properties:
      flavor:
        type: string
        description: name of the Galaxy flavor
        required: true
        default: galaxy-no-tools
      admin_api_key:
        type: string
        description: key to access the API with admin role
        default: not_very_secret_api_key
        required: false
      version:
        type: string
        description: galaxy version installed
        default: master
        required: false
    requirements:
      host:
        type: tosca.capabilities.Container
        node: tosca.nodes.indigo.GalaxyPortal
        relationship: tosca.relationships.HostedOn
    artifacts:
      galaxy_role:
        file: indigo-dc.galaxy-tools,master
        type: tosca.artifacts.AnsibleGalaxy.role
      tooldeps_role:
        file: indigo-dc.galaxycloud-tooldeps
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_tools_configure.yml
          inputs:
            galaxy_flavor: { get_property: [ SELF, flavor ] }
            galaxy_admin_api_key: { get_property: [ HOST, admin_api_key ] }
            instance_public_ip: { get_attribute: [ HOST, public_address, 0 ] }
            galaxy_version: { get_property: [ SELF, version ] }

  tosca.nodes.indigo.GalaxyReferenceData:
    derived_from: tosca.nodes.WebApplication
    properties:
      reference_data:
        type: boolean
        description: Install Reference data
        default: true
        required: true
      flavor:
        type: string
        description: name of the Galaxy flavor
        required: true
        default: galaxy-no-tools
      refdata_repository_name:
        type: string
        description: Onedata space name, CernVM-FS repository name or subdirectory downaload name
        default: 'elixir-italy.galaxy.refdata'
        required: false
      refdata_provider_type:
        type: string
        description: Select Reference data provider type (Onedata, CernVM-FS or download)
        default: 'onedata'
        required: false
      refdata_provider:
        type: string
        description: Oneprovider for reference data
        default: 'not_a_provider'
        required: false
      refdata_token:
        type: string
        description: Access token for reference data
        default: 'not_a_token'
        required: false
      refdata_cvmfs_server_url:
        type: string
        description: CernVM-FS server, replica or stratum-zero
        default: 'server_url'
        required: false
      refdata_cvmfs_repository_name:
        type: string
        description: Reference data CernVM-FS repository name
        default: 'not_a_cvmfs_repository_name'
        required: false
      refdata_cvmfs_key_file:
        type: string
        description: CernVM-FS public key
        default: 'not_a_key'
        required: false
      refdata_cvmfs_proxy_url:
        type: string
        description: CernVM-FS proxy url
        default: 'DIRECT'
        required: false
      refdata_cvmfs_proxy_port:
        type: integer 
        description: CernVM-FS proxy port
        default: 80
        required: false
      refdata_dir:
        type: string
        description: path to store galaxy reference data
        default: /refdata
        required: false
    requirements:
      host:
        type: tosca.capabilities.Container
        node: tosca.nodes.indigo.GalaxyPortal
        relationship: tosca.relationships.HostedOn
    artifacts:
      oneclient_role:
        file: indigo-dc.oneclient
        type: tosca.artifacts.AnsibleGalaxy.role
      cvmfs_role:
        file: indigo-dc.cvmfs-client
        type: tosca.artifacts.AnsibleGalaxy.role
      galaxy_role:
        file: indigo-dc.galaxycloud-refdata
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_redfata_configure.yml
          inputs:
            get_refdata: { get_property: [ SELF, reference_data ] }
            galaxy_flavor: { get_property: [ SELF, flavor ] }
            refdata_repository_name: { get_property: [ SELF, refdata_repository_name ] }
            refdata_provider_type: { get_property: [ SELF, refdata_provider_type ] }
            refdata_provider: { get_property: [ SELF, refdata_provider ] }
            refdata_token: { get_property: [ SELF, refdata_token ] }
            refdata_cvmfs_server_url: { get_property: [ SELF, refdata_cvmfs_server_url ] }
            refdata_cvmfs_repository_name: { get_property: [ SELF, refdata_cvmfs_repository_name ] }
            refdata_cvmfs_key_file: { get_property: [ SELF, refdata_cvmfs_key_file ] }
            refdata_cvmfs_proxy_url: { get_property: [ SELF, refdata_cvmfs_proxy_url ] }
            refdata_cvmfs_proxy_port: { get_property: [ SELF, refdata_cvmfs_proxy_port ] }
            refdata_dir: { get_property: [ SELF, refdata_dir ] }

  tosca.nodes.indigo.ElasticCluster:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      secret_token:
        type: string
        description: Token to access CLUES web interface
        default: not_very_secret_token
        required: false
      deployment_id:
        type: string
        description: ID of the deployment of this elastic cluster in the orchestrator
        required: false
      orchestrator_url:
        type: string
        description: URL of the orchestrator
        required: false
        default: http://orchestrator01-indigo.cloud.ba.infn.it:8080/orchestrator
      iam_access_token:
        type: string
        description: INDIGO IAM access token
        required: false
        default: iam_access_token
      iam_clues_client_id:
        type: string
        description: INDIGO IAM client id to be used by CLUES
        required: false
        default: iam_clues_client_id
      iam_clues_client_secret:
        type: string
        description: INDIGO IAM client secret to be used by CLUES
        required: false
        default: iam_clues_client_secret
      marathon_credentials:
        type: tosca.datatypes.Credential
        description: Credentials to access the marathon endpoint from CLUES plugin
        required: false
      chronos_credentials:
        type: tosca.datatypes.Credential
        description: Credentials to access the chronos endpoint from CLUES plugin
        required: false
      mesos_credentials:
        type: tosca.datatypes.Credential
        description: Credentials to access the mesos endpoint from CLUES plugin
        required: false
      hybrid:
        type: boolean
        description: Flag to specify that this ElasticCluster will work in a hybrid environment
        default: false
        required: false
    artifacts:
      docker_agent_role:
        file: indigo-dc.clues
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        create:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ec3/ec3_install.yml
          inputs:
            clues_secret_token: { get_property: [ SELF, secret_token ] }
            clues_queue_system: { get_property: [ SELF, lrms, type ] }
            ec3_max_instances: { get_property: [ SELF, wn, max_instances] }
            ec3_deployment_id: { get_property: [ SELF, deployment_id] }
            orchestrator_url: { get_property: [ SELF, orchestrator_url] }
            ec3_iam_access_token: { get_property: [ SELF, iam_access_token] }
            ec3_iam_clues_client_id: { get_property: [ SELF, iam_clues_client_id] }
            ec3_iam_clues_client_secret: { get_property: [ SELF, iam_clues_client_secret] }
            clues_marathon_credentials: { get_property: [ SELF, marathon_credentials] }
            clues_chronos_credentials: { get_property: [ SELF, chronos_credentials] }
            clues_mesos_credentials: { get_property: [ SELF, mesos_credentials] }
    requirements:
      wn:
        type: tosca.capabilities.Scalable
        node: tosca.nodes.indigo.LRMS.WorkerNode
        relationship: tosca.relationships.indigo.Manages
      lrms:
        type: tosca.capabilities.indigo.LRMS
        node: tosca.nodes.indigo.LRMS.FrontEnd
        relationship: tosca.relationships.HostedOn

  tosca.nodes.indigo.LRMS.WorkerNode:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      front_end_ip:
        type: string
        description: IP of the Front-End node
        required: true
      hybrid:
        type: boolean
        description: Flag to specify that this WorkerNode will work in a hybrid environment
        default: false
        required: false
      public_front_end_ip:
        type: string
        description: Public IP of the Front-End node
        required: false
        default: ''
    capabilities:
        wn:
          type: tosca.capabilities.Scalable
          valid_source_types: [tosca.nodes.indigo.ElasticCluster]
    requirements:
      host:
        type: tosca.capabilities.Container
        node: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn

  tosca.nodes.indigo.LRMS.WorkerNode.Torque:
    derived_from: tosca.nodes.indigo.LRMS.WorkerNode
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/torque/torque_wn_install.yml
          inputs:
            torque_front_end_ip: { get_property: [ SELF, front_end_ip ] }
            wn_hybrid_cluster:  { get_property: [ SELF, hybrid] }

  tosca.nodes.indigo.LRMS.WorkerNode.Slurm:
    derived_from: tosca.nodes.indigo.LRMS.WorkerNode
    artifacts:
      slurm_role:
        file: indigo-dc.slurm
        type: tosca.artifacts.AnsibleGalaxy.role
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
      openvpn_role:
        file: indigo-dc.openvpn
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/slurm/slurm_wn_install.yml
          inputs:
            slurm_front_end_ip: { get_property: [ SELF, front_end_ip ] }
            wn_hybrid_cluster:  { get_property: [ SELF, hybrid] }
            slurm_public_front_end_ip: { get_property: [ SELF, public_front_end_ip ] }

  tosca.nodes.indigo.LRMS.FrontEnd:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      wn_ips:
        type: list
        entry_schema:
          type: string
        description: List of IPs of the WNs
        required: false
      hybrid:
        type: boolean
        description: Flag to specify that this FrontEnd will work in a hybrid environment
        default: false
        required: false
    capabilities:
        lrms:
          type: tosca.capabilities.indigo.LRMS
    requirements:
      host:
        type: tosca.capabilities.Container
        node: tosca.nodes.Compute
        relationship: tosca.relationships.HostedOn

  tosca.nodes.indigo.LRMS.FrontEnd.Torque:
    derived_from: tosca.nodes.indigo.LRMS.FrontEnd
    capabilities:
        lrms:
          type: tosca.capabilities.indigo.LRMS.Torque
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/torque/torque_fe_install.yml
          inputs:
            torque_wn_ips: { get_property: [ SELF, wn_ips ] }
            fe_hybrid_cluster:  { get_property: [ SELF, hybrid] }

  tosca.nodes.indigo.LRMS.FrontEnd.Slurm:
    derived_from: tosca.nodes.indigo.LRMS.FrontEnd
    artifacts:
      slurm_role:
        file: indigo-dc.slurm
        type: tosca.artifacts.AnsibleGalaxy.role
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
      openvpn_role:
        file: indigo-dc.openvpn
        type: tosca.artifacts.AnsibleGalaxy.role
    capabilities:
        lrms:
          type: tosca.capabilities.indigo.LRMS.Slurm
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/slurm/slurm_fe_install.yml
          inputs:
            wn_ips: { get_property: [ SELF, wn_ips ] }
            front_end_ip: { get_attribute: [ HOST, private_address, 0 ] }
            fe_hybrid_cluster:  { get_property: [ SELF, hybrid] }

  tosca.nodes.indigo.LRMS.FrontEnd.Local:
    derived_from: tosca.nodes.indigo.LRMS.FrontEnd
    capabilities:
        lrms:
          type: tosca.capabilities.indigo.LRMS.Local

  tosca.nodes.indigo.Container.Runtime.Docker:
    derived_from: tosca.nodes.SoftwareComponent
    capabilities:
      host:
        type: tosca.capabilities.indigo.Container.Docker
      scalable:
        type: tosca.capabilities.Scalable

  tosca.nodes.indigo.Container.Application.Docker:
    derived_from: tosca.nodes.Container.Application.Docker
    properties:
      command:
        required: no
        type: string
      uris:
        required: no
        type: list
        entry_schema:
          type: string
      environment_variables:
        required: no
        type: map
        entry_schema:
          type: string
      constraints:
        required: no
        type: list
        entry_schema:
          type: list
          entry_schema:
            type: string
      labels:
        required: no
        type: map
        entry_schema:
          type: string
      priviliged:
        required: no
        type: boolean
        default: false
      force_pull_image:
        required: no
        type: boolean
        default: false


  tosca.nodes.indigo.Container.Application.Docker.Chronos:
    derived_from: tosca.nodes.indigo.Container.Application.Docker
    properties:
      schedule:
        required: no
        type: string
      command:
        required: yes
        type: string
      description:
        required: no
        type: string
      retries:
        required: no
        type: integer
      epsilon:
        required: no
        type: string
        default: PT10S
      priviliged:
        required: no
        type: boolean
        default: true
      force_pull_image:
        required: no
        type: boolean
        default: true
    capabilities:
      parent_job:
        type: tosca.capabilities.indigo.Container.Application.Docker.Chronos
        valid_source_types: [tosca.nodes.indigo.Container.Application.Docker.Chronos]
        occurrences: [0, UNBOUNDED]
    requirements:
      parent_job:
        type: tosca.capabilities.indigo.Container.Application.Docker.Chronos
        node: tosca.nodes.indigo.Container.Application.Docker.Chronos
        relationship: tosca.relationships.DependsOn
        occurrences: [0, 1]


  tosca.nodes.indigo.DariahRepository:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      marathon_password:
        type: string
        required: yes
      cache_cpus:
        type: float
        required: no
        default: 1.0
      cache_mem:
        type: integer
        required: no
        default: 1024
      cache_image:
        type: string
        required: no
        default: 'redis'
      db_cpus:
        type: float
        required: no
        default: 1.0
      db_mem:
        type: integer
        required: no
        default: 1024
      db_image:
        type: string
        required: no
        default: 'postgres'
      es_cpus:
        type: float
        required: no
        default: 1.0
      es_mem:
        type: integer
        required: no
        default: 1024
      es_image:
        type: string
        required: no
        default: 'indigodatacloudapps/dariah-repository:elasticsearch'
      mq_cpus:
        type: float
        required: no
        default: 1.0
      mq_mem:
        type: integer
        required: no
        default: 1024
      mq_image:
        type: string
        required: no
        default: 'rabbitmq:3-management'
      statsd_cpus:
        type: float
        required: no
        default: 1.0
      statsd_mem:
        type: integer
        required: no
        default: 1024
      statsd_image:
        type: string
        required: no
        default: 'indigodatacloudapps/dariah-repository:statsd'
      web_cpus:
        type: float
        required: no
        default: 1.0
      web_mem:
        type: integer
        required: no
        default: 1024
      web_image:
        type: string
        required: no
        default: 'indigodatacloudapps/dariah-repository:web'
      worker_cpus:
        type: float
        required: no
        default: 1.0
      worker_mem:
        type: integer
        required: no
        default: 1024
      worker_image:
        type: string
        required: no
        default: 'indigodatacloudapps/dariah-repository:web'
    artifacts:
      dariahrepo_role:
        file: indigo-dc.dariahrepo
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        create:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/dariahrepo-setup.yml
          inputs:
            marathon_password: { get_property: [ SELF, marathon_password ] }
            dariahrepo_app_cache_cpus: { get_property: [ SELF, cache_cpus ] }
            dariahrepo_app_cache_mem: { get_property: [ SELF, cache_mem ] }
            dariahrepo_app_cache_image: { get_property: [ SELF, cache_image ] }
            dariahrepo_app_db_cpus: { get_property: [ SELF, db_cpus ] }
            dariahrepo_app_db_mem: { get_property: [ SELF, db_mem ] }
            dariahrepo_app_db_image: { get_property: [ SELF, db_image ] }
            dariahrepo_app_es_cpus: { get_property: [ SELF, es_cpus ] }
            dariahrepo_app_es_mem: { get_property: [ SELF, es_mem ] }
            dariahrepo_app_es_image: { get_property: [ SELF, es_image ] }
            dariahrepo_app_mq_cpus: { get_property: [ SELF, mq_cpus ] }
            dariahrepo_app_mq_mem: { get_property: [ SELF, mq_mem ] }
            dariahrepo_app_mq_image: { get_property: [ SELF, mq_image ] }
            dariahrepo_app_statsd_cpus: { get_property: [ SELF, statsd_cpus ] }
            dariahrepo_app_statsd_mem: { get_property: [ SELF, statsd_mem ] }
            dariahrepo_app_statsd_image: { get_property: [ SELF, statsd_image ] }
            dariahrepo_app_web_cpus: { get_property: [ SELF, web_cpus ] }
            dariahrepo_app_web_mem: { get_property: [ SELF, web_mem ] }
            dariahrepo_app_web_image: { get_property: [ SELF, web_image ] }
            dariahrepo_app_worker_cpus: { get_property: [ SELF, worker_cpus ] }
            dariahrepo_app_worker_mem: { get_property: [ SELF, worker_mem ] }
            dariahrepo_app_worker_image: { get_property: [ SELF, worker_image ] }
    requirements:
      host:
        type: tosca.capabilities.indigo.MesosMaster
        relationship: tosca.relationships.HostedOn
        node: tosca.nodes.SoftwareComponent
        occurrences: [1, 1]

  tosca.nodes.indigo.Container.Application.Docker.Marathon:
    derived_from: tosca.nodes.indigo.Container.Application.Docker
    attributes:
      load_balancer_ips:
        type: list
        entry_schema: string
    properties:
      force_pull_image:
        required: no
        type: boolean
        default: true


  tosca.nodes.indigo.LRMS.FrontEnd.Mesos:
    derived_from: tosca.nodes.indigo.LRMS.FrontEnd
    capabilities:
        lrms:
          type: tosca.capabilities.indigo.LRMS.Mesos
        host:
          type: tosca.capabilities.indigo.MesosMaster
    properties:
      # Set the current data of the mesos server
      # but it can also specified in the TOSCA document
      mesos_masters_list:
        type: string
        required: no
        default: "{ get_attribute: [ HOST, public_address ] }"
      mesos_authenticate_http:
        type: boolean
        required: no
        default: true
      mesos_username:
        type: string
        required: no
        default: 'admin'       
      mesos_password:
        type: string
        required: no
        default: 'admin'         
      marathon_enable_ssl:
        type: boolean
        required: no
        default: true
      marathon_username:
        type: string
        required: no
        default: admin
      marathon_password:
        type: string
        required: yes
      enable_chronos:
        type: boolean
        required: no
        default: true
      chronos_enable_ssl:
        type: boolean
        required: no
        default: true
      chronos_username:
        type: string
        required: no
        default: admin
      chronos_password:
        type: string
        required: no
        default: admin
      enable_nfs_share:
        type: boolean
        required: no
        default: false
    artifacts:
      docker_agent_role:
        file: indigo-dc.docker
        type: tosca.artifacts.AnsibleGalaxy.role
      consul_agent_role:
        file: indigo-dc.consul
        type: tosca.artifacts.AnsibleGalaxy.role
      zookeeper_agent_role:
        file: indigo-dc.zookeeper
        type: tosca.artifacts.AnsibleGalaxy.role
      mesos_agent_role:
        file: indigo-dc.mesos
        type: tosca.artifacts.AnsibleGalaxy.role
      marathon_agent_role:
        file: indigo-dc.marathon
        type: tosca.artifacts.AnsibleGalaxy.role
      chronos_agent_role:
        file: indigo-dc.chronos
        type: tosca.artifacts.AnsibleGalaxy.role
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_master_install.yml
          inputs:
            mesos_masters_list_ips: { get_property: [ SELF, mesos_masters_list ] }
            mesos_authenticate_http: { get_property: [ SELF, mesos_authenticate_http ] }
            mesos_username: { get_property: [ SELF, mesos_username ] }
            mesos_password: { get_property: [ SELF, mesos_password ] }
            marathon_enable_ssl: { get_property: [ SELF, marathon_enable_ssl ] }
            marathon_user: { get_property: [ SELF, marathon_username ] }
            marathon_pass: { get_property: [ SELF, marathon_password ] }
            enable_chronos: { get_property: [ SELF, enable_chronos ] }
            chronos_enable_ssl: { get_property: [ SELF, chronos_enable_ssl ] }
            chronos_user: { get_property: [ SELF, chronos_username ] }
            chronos_pass: { get_property: [ SELF, chronos_password ] }
            enable_nfs_share: { get_property: [ SELF, enable_nfs_share ] }
            wn_ips: { get_property: [ SELF, wn_ips ] }

  tosca.nodes.indigo.MesosMaster:
    derived_from: tosca.nodes.indigo.LRMS.FrontEnd.Mesos

  tosca.nodes.indigo.CmsServices:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      cms_local_site:
        type: string
        required: yes
      cms_squid_image:
        type: string
        required: no
        default: "spiga/frontiersquidv1"
      cms_wn_image:
        type: string
        default: "spiga/cmswn"
        required: no
      cms_proxycache_image:
        type: string
        required: no
        default: "spiga/ttscache"
      mysquid_host:
        type: string
        required: yes
      proxycache_host:
        type: string
        required: yes
      iam_access_token:
        type: string
        description: INDIGO IAM access token
        required: yes
      iam_client_id:
        type: string
        description: INDIGO IAM client id
        required: yes
      iam_client_secret:
        type: string
        description: INDIGO IAM client secret
        required: yes
      marathon_username:
        type: string
        required: no
        default: admin
      marathon_password:
        type: string
        required: yes
      onedatatoken:
        type: string
        required: no
      onedatacache:
        type: string
        required: no
    artifacts:
      cms_config_role:
        file: indigo-dc.cms_config
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        start:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/cms_services_start.yml
          inputs:
            cms_config_mysquid_host: { get_property: [ SELF, mysquid_host ] }
            cms_config_proxycache_host: { get_property: [ SELF, proxycache_host ] }
            cms_config_iamtoken: { get_property: [ SELF, iam_access_token ] }
            cms_config_iam_client_id: { get_property: [ SELF, iam_client_id ] }
            cms_config_iam_client_secret: { get_property: [ SELF, iam_client_secret ] }
            cms_config_cms_local_site: { get_property: [ SELF, cms_local_site ] }
            cms_config_squid_image: { get_property: [ SELF, cms_squid_image ] }
            cms_config_wn_image: { get_property: [ SELF, cms_wn_image ] }
            cms_config_proxycache_image: { get_property: [ SELF, cms_proxycache_image ]}
            cms_config_onedatacache: { get_property: [ SELF, onedatacache ] }
            cms_config_onedatatoken: { get_property: [ SELF, onedatatoken ] }
            marathon_user: { get_property: [ SELF, marathon_username ] }
            marathon_pass: { get_property: [ SELF, marathon_password ] }
    requirements:
      host:
        type: tosca.capabilities.indigo.MesosMaster
        relationship: tosca.relationships.HostedOn
        node: tosca.nodes.SoftwareComponent
        occurrences: [1, 1]


  tosca.nodes.indigo.LRMS.WorkerNode.Mesos:
    derived_from: tosca.nodes.indigo.LRMS.WorkerNode
    capabilities:
        host:
          type: tosca.capabilities.indigo.MesosSlave
    properties:
      # Set the current data of the mesos server
      # but it can also specified in the TOSCA document
      master_ips:
        required: yes
        type: list
        entry_schema:
          type: string
      enable_nfs_share:
        type: boolean
        required: no
        default: false
    artifacts:
      docker_agent_role:
        file: indigo-dc.docker
        type: tosca.artifacts.AnsibleGalaxy.role
      consul_agent_role:
        file: indigo-dc.consul
        type: tosca.artifacts.AnsibleGalaxy.role
      mesos_agent_role:
        file: indigo-dc.mesos
        type: tosca.artifacts.AnsibleGalaxy.role
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        create:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_slave_install.yml
          inputs:
            mesos_masters_list_ips: { get_property: [ SELF, master_ips ] }
            enable_nfs_share: { get_property: [ SELF, enable_nfs_share ] }
            front_end_ip: { get_property: [ SELF, front_end_ip ] }

  tosca.nodes.indigo.MesosSlave:
    derived_from: tosca.nodes.indigo.LRMS.WorkerNode.Mesos


  tosca.nodes.indigo.CmsWnConfig:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      cms_local_site:
        type: string
        required: yes
      cms_stageoutsite:
        type: string
        required: yes
      cms_stageoutserver:
        type: string
        required: yes
      cms_stageoutprefix:
        type: string
        required: yes
      cms_stageoutsite_fallback:
        type: string
        required: yes
      cms_stageoutserver_fallback:
        type: string
        required: yes
      cms_stageoutprefix_fallback:
        type: string
        required: yes
      cms_input_path:
        type: string
        required: yes
      cms_input_protocol:
        type: string
        required: yes
      mysquid_host:
        type: string
        required: yes
      proxycache_host:
        type: string
        required: yes
      monitordb_ip:
        type: string
        required: no
      elasticsearch_secret:
        type: string
        required: no
    artifacts:
      cms_config_role:
        file: indigo-dc.cms_config
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/cms_wn_configure.yml
          inputs:
            cms_config_mysquid_host: { get_property: [ SELF, mysquid_host ] }
            cms_config_proxycache_host: { get_property: [ SELF, proxycache_host ] }
            cms_config_cms_local_site: { get_property: [ SELF, cms_local_site ] }
            cms_config_stageoutsite: { get_property: [ SELF, cms_stageoutsite ] }
            cms_config_stageoutserver: { get_property: [ SELF, cms_stageoutserver ] }
            cms_config_stageoutprefix: { get_property: [ SELF, cms_stageoutprefix ] }
            cms_config_stageoutsite_fallback: { get_property: [ SELF, cms_stageoutsite_fallback ] }
            cms_config_stageoutserver_fallback: { get_property: [ SELF, cms_stageoutserver_fallback ] }
            cms_config_stageoutprefix_fallback: { get_property: [ SELF, cms_stageoutprefix_fallback ] }
            cms_input_path: { get_property: [ SELF, cms_input_path ] }
            cms_input_protocol: { get_property: [ SELF, cms_input_protocol ] }
            cms_config_elastic_secret: { get_property: [ SELF, elasticsearch_secret ] }
            monitordb_ip: { get_property: [ SELF, monitordb_ip ] }
    requirements:
      host:
        type: tosca.capabilities.indigo.MesosSlave
        relationship: tosca.relationships.HostedOn
        node: tosca.nodes.SoftwareComponent
        occurrences: [1, 1]


  tosca.nodes.indigo.MesosLoadBalancer:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      master_ips:
        required: yes
        type: list
        entry_schema:
          type: string
      marathon_username:
        type: string
        required: no
        default: admin
      marathon_password:
        type: string
        required: yes
    artifacts:
      docker_agent_role:
        file: indigo-dc.docker
        type: tosca.artifacts.AnsibleGalaxy.role
      consul_agent_role:
        file: indigo-dc.consul
        type: tosca.artifacts.AnsibleGalaxy.role
      marathon_lb_role:
        file: indigo-dc.marathon-lb
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        create:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_lb_install.yml
          inputs:
            consul_server_ips: { get_property: [ SELF, master_ips ] }
            marathon_username: { get_property: [ SELF, marathon_username ] }
            marathon_password: { get_property: [ SELF, marathon_password ] }
    requirements:
      host:
        type: tosca.capabilities.Container
        node: tosca.nodes.indigo.Compute
        relationship: tosca.relationships.HostedOn

  tosca.nodes.indigo.SparkMesos:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      marathon_password:
        type: string
        required: true
      zookeeper_peers:
        type: string
        required: true
      spark_mesos_deploy_app:
        type: string
        constraints:
        - valid_values: [ apache-zeppelin, spark-dispatcher ]
        required: false
      spark_hdfs_uri:
        type: string
        required: false
        default: ''
      spark_swift_auth_url: 
        type: string
        required: false
        default: ''
      spark_swift_http_port:
        type: string
        required: false
        default: '8080'
      spark_swift_region: 
        type: string
        required: false
        default: ''
      spark_swift_tenant:
        type: string
        required: false
        default: ''
      spark_swift_username: 
        type: string
        required: false
        default: ''
      spark_swift_password: 
        type: string
        required: false
        default: ''
      spark_swift_provider: 
        type: string
        required: false
        default: 'Test'
      spark_cores_max: 
        type: integer
        required: false
        default: '-1'
      spark_executor_cores: 
        type: integer
        required: false
        default: '-1'
      spark_executor_mem:
        type: scalar-unit.size
        required: false
        default: '0 GB'
      spark_driver_mem: 
        type: scalar-unit.size
        required: false
        default: '0 GB'
      spark_driver_cores: 
        type: integer
        required: false
        default: '-1'
    artifacts:
      spark_mesos_role:
        file: indigo-dc.spark-mesos
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        create:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/spark_mesos_setup.yml
          inputs:
            marathon_password: { get_property: [ SELF, marathon_password ] }
            zookeeper_peers: { get_property: [ SELF, zookeeper_peers ] }
            spark_hdfs_uri: { get_property: [ SELF, spark_hdfs_uri ] }
            spark_swift_auth_url: { get_property: [ SELF, spark_swift_auth_url ] }
            spark_mesos_swift_http_port: { get_property: [ SELF, spark_swift_http_port ] }
            spark_mesos_swift_region: { get_property: [ SELF, spark_swift_region  ] }
            spark_mesos_swift_tenant: { get_property: [ SELF, spark_swift_tenant ] }
            spark_mesos_swift_username:  { get_property: [ SELF, spark_swift_username ] }
            spark_mesos_swift_password: { get_property: [ SELF, spark_swift_password ] }
            spark_mesos_swift_provider: { get_property: [ SELF, spark_swift_provider ] }
            spark_mesos_cores_max: { get_property: [ SELF, spark_cores_max ] }
            spark_mesos_executor_cores: { get_property: [ SELF, spark_executor_cores ] }
            spark_mesos_executor_mem: { get_property: [ SELF, spark_executor_mem ] }
            spark_mesos_driver_mem: { get_property: [ SELF, spark_driver_mem ] }
            spark_mesos_driver_cores: { get_property: [ SELF, spark_driver_cores ] }
    requirements:
      host:
        type: tosca.capabilities.indigo.MesosMaster
        relationship: tosca.relationships.HostedOn
        node: tosca.nodes.SoftwareComponent
        occurrences: [1, 1]

  tosca.nodes.indigo.OneDataStorage:
    derived_from: tosca.nodes.BlockStorage
    properties:
      size:
        # to overwrite BlockStorage size property to set it as not required
        type: scalar-unit.size
        required: false
      oneprovider_host:
        type: list
        entry_schema:
          type: string
        required: false
      onezone_endpoint:
        type: string
        required: false
      dataspace:
        type: list
        entry_schema:
          type: string
        required: false
      credential:
        type: tosca.datatypes.Credential
        required: true

  tosca.nodes.indigo.HadoopMaster:
    derived_from: tosca.nodes.SoftwareComponent
    artifacts:
      hadoop_role:
        file: indigo-dc.hadoop
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/hadoop/hadoop_master_install.yml
          inputs:
            hadoop_master_ip: { get_attribute: [ HOST, private_address, 0 ] }

  tosca.nodes.indigo.HadoopSlave:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      master_ip:
        required: yes
        type: string
    artifacts:
      hadoop_role:
        file: indigo-dc.hadoop
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/hadoop/hadoop_wn_install.yml
          inputs:
            hadoop_master_ip: { get_property: [ SELF, master_ip ] }

  tosca.nodes.indigo.HaddockApp:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      haddock_app_name:
        type: string
        description: Haddocking application
        required: true
        constraints:
        - valid_values: [ disvis, powerfit ]
    artifacts:
      galaxy_role:
        file: indigo-dc.disvis-powerfit
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/haddock/haddock_install.yml
          inputs:
            haddock_app_name: { get_property: [ SELF, haddock_app_name ] }

  tosca.nodes.indigo.Disvis:
    derived_from: tosca.nodes.indigo.HaddockApp
    properties:
      haddock_app_name:
        type: string
        required: true
        default: disvis
        constraints:
          - equal: disvis

  tosca.nodes.indigo.Powerfit:
    derived_from: tosca.nodes.indigo.HaddockApp
    properties:
      haddock_app_name:
        type: string
        required: true
        default: powerfit
        constraints:
          - equal: powerfit

  tosca.nodes.indigo.Eubiosteo:
    derived_from: tosca.nodes.SoftwareComponent
    artifacts:
      galaxy_role:
        file: indigo-dc.eubiosteo
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/eubiosteo/eubiosteo_install.yml

  tosca.nodes.indigo.Ambertools:
    derived_from: tosca.nodes.SoftwareComponent
    artifacts:
      galaxy_role:
        file: indigo-dc.ambertools
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ambertools/ambertools_install.yml

  tosca.nodes.indigo.Kepler:
    derived_from: tosca.nodes.SoftwareComponent
    artifacts:
      galaxy_role:
        file: indigo-dc.kepler
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/kepler/kepler_install.yml

  tosca.nodes.indigo.OphidiaServer:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      io_ips:
        type: list
        entry_schema:
          type: string
        description: List of IPs of the Ophidia IO nodes
        required: false
    artifacts:
      ophidia_role:
        file: indigo-dc.ophidia-cluster
        type: tosca.artifacts.AnsibleGalaxy.role
      slurm_role:
        file: indigo-dc.slurm
        type: tosca.artifacts.AnsibleGalaxy.role
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ophidia/ophidia_server_install.yml
          inputs:
            ophidia_io_ips: { get_property: [ SELF, io_ips ] }

  tosca.nodes.indigo.OphidiaIO:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      server_ip:
        type: string
        description: IP of the OphidiaServer node
        required: true
    artifacts:
      ophidia_role:
        file: indigo-dc.ophidia-cluster
        type: tosca.artifacts.AnsibleGalaxy.role
      slurm_role:
        file: indigo-dc.slurm
        type: tosca.artifacts.AnsibleGalaxy.role
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ophidia/ophidia_io_install.yml
          inputs:
            ophidia_server_ip: { get_property: [ SELF, server_ip ] }

  tosca.nodes.indigo.Batch.Job:
    derived_from: tosca.nodes.Root
    properties:
      executable:
        required: yes
        type: string
        description: Name of the executable file
      arguments:
        required: no
        type: string
        description: Arguments for the job executable
      environment:
        type: map
        entry_schema:
          type: string
        description: A map of string representing environment settings

# https://wiki.italiangrid.it/twiki/bin/view/CREAM/JdlGuide
  tosca.nodes.indigo.Grid.Job:
    derived_from: tosca.nodes.indigo.Batch.Job
    properties:
      ce_urls:
        required: yes
        type: list
        entry_schema:
          type: string
        description: A list of CREAM CE identifiers to launch the job
      stdoutput:
        required: no
        description: Name of the file to get the standard output stream of the user application
        type: string
      stderror:
        required: no
        type: string
        description: Name of the file to get the standard error stream of the user application
      outputsandbox:
        type: list
        entry_schema:
          type: string
        description: A list of output sandbox files
      inputsandbox:
        type: list
        entry_schema:
          type: string
        description: A list of input sandbox files (URL of files located in gridFTP servers)
      virtualorganisation:
        required: no
        type: string
        description: Specify the VO of the user

