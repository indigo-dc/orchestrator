tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/custom_types.yaml

description: >
  TOSCA examples for specifying a Chronos Job that runs an application using the input stored at some URL and uploads the output data to an http(s) or ftp(s) or webdav(s) repository

topology_template:

  inputs:
    input_urls:
      type: list
      description: List of input files that will be downloaded in the job sandbox (archives will be automatically uncompressed)
      entry_schema:
        type: string
      required: yes

    output_protocol:
      type: string
      description: Protocol that will be used to upload the output generated by the job
      constraints:
         - valid_values: [ http, https, webdav, webdavs, ftp, ftps ]
      required: yes

    output_endpoint:
      type: string
      description: 'Endpoint to be used to upload the output generated by the job. Example: http://myhttpserver:8080/'
      required: yes

    output_path:
      type: string
      description: 'Path in the repository where the output data will be uploaded (to be appended to the endpoint string, e.g. http://myhttpserver:8080/output_path/)'
      required: yes

    output_username:
      type: string
      description: Username used to access the URL where the output files will be stored
      required: yes

    output_password:
      type: string
      description: Protocol that will be used to upload the output generated by the job
      required: yes

    output_filenames:
      type: list
      description: List of filenames generated by the application run
      entry_schema:
        type: string
      required: yes

    command:
      type: string
      description: Command to execute
      default: 'env'
      required: no

    cpus:
      type: float
      description: Amount of CPUs for this job
      required: yes

    mem:
      type: scalar-unit.size
      description: Amount of Memory for this job
      required: yes

    docker_image:
      type: string
      description: Docker image to be used to run the container application
      required: yes

  node_templates:
    chronos_job:
      type: tosca.nodes.indigo.Container.Application.Docker.Chronos
      properties:
        schedule: 'R0/2015-12-25T17:22:00Z/PT1M'
        description: 'Execute Application'
        command: { get_input: command }
        uris: { get_input: input_urls}
        retries: 3
        environment_variables:
          OUTPUT_FILENAMES: { get_input: output_filenames }
          ONEDATA_SERVICE_TOKEN: 'TOKEN_TO_BE_SET_BY_THE_ORCHESTRATOR'
          ONEDATA_SPACE: 'DATA_SPACE_TO_BE_SET_BY_THE_ORCHESTRATOR'
          ONEDATA_PATH: 'PATH_TO_BE_SET_BY_THE_ORCHESTRATOR'
          ONEDATA_PROVIDERS: 'ONEDATA_PROVIDERS_TO_BE_SET_BY_THE_ORCHESTRATOR'
      artifacts:
        image:
          file: { get_input: docker_image }
          type: tosca.artifacts.Deployment.Image.Container.Docker
      requirements:
        - host: docker_runtime1


    chronos_job_upload:
        type: tosca.nodes.indigo.Container.Application.Docker.Chronos
        properties:
          description: 'Upload output data'
          command: 'echo \"I will upload something...\"'
          retries: 3
          environment_variables:
            OUTPUT_PROTOCOL: { get_input: output_protocol }
            OUTPUT_ENDPOINT: { get_input: output_endpoint }
            OUTPUT_PATH: { get_input: output_path }
            OUTPUT_USERNAME: { get_input: output_username }
            OUTPUT_PASSWORD: { get_input: output_password }
            OUTPUT_FILENAMES: { get_input: output_filenames }
            ONEDATA_SERVICE_TOKEN: 'TOKEN_TO_BE_SET_BY_THE_ORCHESTRATOR'
            ONEDATA_SPACE: 'DATA_SPACE_TO_BE_SET_BY_THE_ORCHESTRATOR'
            ONEDATA_PATH: 'PATH_TO_BE_SET_BY_THE_ORCHESTRATOR'
            ONEDATA_PROVIDERS: 'ONEDATA_PROVIDERS_TO_BE_SET_BY_THE_ORCHESTRATOR'
        artifacts:
          image:
            #file: indigodatacloud/jobuploader # NOT EXISTS YET!
            file: libmesos/ubuntu
            type: tosca.artifacts.Deployment.Image.Container.Docker
        requirements:
          - host: docker_runtime2
          - parent_job: chronos_job


    docker_runtime1:
      type: tosca.nodes.indigo.Container.Runtime.Docker
      capabilities:
        host:
          properties:
            num_cpus: { get_input: cpus }
            mem_size: { get_input: mem }


    docker_runtime2:
      type: tosca.nodes.indigo.Container.Runtime.Docker
      capabilities:
        host:
          properties:
            num_cpus: 1.0
            mem_size: 1024 MB
