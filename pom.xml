<!--

    Copyright Â© 2015-2017 Santer Reply S.p.A.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>it.reply</groupId>
	<artifactId>orchestrator</artifactId>
	<version>1.3.0-FINAL</version>
	<packaging>war</packaging>
	<name>orchestrator</name>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<scm>
		<url>https://github.com/indigo-dc/orchestrator</url>
		<connection>scm:git:https://github.com/indigo-dc/orchestrator.git</connection>
		<developerConnection>scm:git:https://github.com/indigo-dc/orchestrator.git</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<organization>
		<name>Santer Reply S.p.A.</name>
		<url>http://www.reply.com</url>
	</organization>
  
  <inceptionYear>2015</inceptionYear>
  
	<properties>
		<license-maven-plugin.version>3.0</license-maven-plugin.version>
		<!-- Execute tests by defaults -->
		<surefire.skip>false</surefire.skip>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>

		<!-- Plugins -->
		<version.buildnumber.plugin>1.4</version.buildnumber.plugin>

		<!-- Dependencies -->
		<openid.connect.version>1.2.6</openid.connect.version>
		<log4j.version>2.7</log4j.version>
		<slf4j.version>1.7.22</slf4j.version>
		<im-java-api.version>0.4.7</im-java-api.version>
		<monitoring.pillar.domain.version>1.8.1-FINAL</monitoring.pillar.domain.version>

		<mockito.version>1.10.19</mockito.version>
		<jsonpath.version>2.1.0</jsonpath.version>
		<snippetsDirectory>${project.build.directory}\generated-snippets</snippetsDirectory>
		<checkstyle-plugin.version>2.17</checkstyle-plugin.version>
		<workflow-manager.version>0.0.4-BETA.1</workflow-manager.version>
		<alien4cloud.version>1.1.0-INDIGO2-ALPHA.3</alien4cloud.version>
		<chronos-client.version>0.0.1-BETA.2</chronos-client.version>
		<marathon-client.version>0.3.1-INDIGO-BETA.1</marathon-client.version>
	</properties>

	<distributionManagement>
		<!-- Publish versioned releases here -->
		<repository>
			<id>concept-reply-nexus-repository</id>
			<name>Concept Reply Releases Repository</name>
			<url>http://nexusconcept.cloud.reply.eu/content/repositories/releases</url>
		</repository>

		<!-- Publish snapshots here -->
		<snapshotRepository>
			<id>concept-reply-nexus-repository</id>
			<name>Concept Reply Snaphots Repository</name>
			<url>http://nexusconcept.cloud.reply.eu/content/repositories/public-snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<repositories>
		<repository>
			<id>concept-reply-nexus-repository</id>
			<name>Concept Reply Nexus</name>
			<url>http://nexusconcept.cloud.reply.eu/content/groups/public</url>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/libs-milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>21.0</version>
			</dependency>
			<!-- Alien4Cloud requires v1.7.0 -->
			<dependency>
				<groupId>org.elasticsearch</groupId>
				<artifactId>elasticsearch</artifactId>
				<version>1.7.0</version>
			</dependency>
 			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>4.1.9.RELEASE</version>
			</dependency>
			<dependency>
				<!-- Import dependency management from Spring Boot -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>1.3.8.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
<!-- 				<exclusions>
					<exclusion>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.elasticsearch</groupId>
						<artifactId>elasticsearch</artifactId>
					</exclusion>
				</exclusions> -->
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<dependencies>
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
 		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<scope>provided</scope>
			<version>1.2</version>
		</dependency>	
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.tomcat.embed</groupId>
					<artifactId>tomcat-embed-el</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
 <!--		<dependency>
   		<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-log4j2</artifactId>
    		 <exclusions>
    			<exclusion>
    				<groupId>org.apache.logging.log4j</groupId>
    				<artifactId>log4j-slf4j-impl</artifactId>
    			</exclusion>
    			<exclusion>
    				<groupId>org.apache.logging.log4j</groupId>
    				<artifactId>log4j-core</artifactId>
    			</exclusion>
    		</exclusions> 
		</dependency>-->
<!--         <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-activemq</artifactId>
		</dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.apache.tomcat</groupId>
					<artifactId>tomcat-jdbc</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
<!-- 		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency> -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		    <version>1.16.14</version>
			<optional>true</optional>
		</dependency>
		<!-- Fix for java.lang.NoSuchFieldError: REFLECTION -->
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>2.2.11</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.2.11</version>
		</dependency>
		<!-- -->
		<!-- Fix to avoid to import the library (which conflicts with the one in 
			WildFly) -->
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<artifactId>xml-apis</artifactId>
					<groupId>xml-apis</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.security.oauth</groupId>
			<artifactId>spring-security-oauth2</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mitre</groupId>
			<artifactId>openid-connect-client</artifactId>
			<version>${openid.connect.version}</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.4</version>
		</dependency>
<!--		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency> -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
		</dependency>
		<dependency>
			<groupId>es.upv.i3m.grycap</groupId>
			<artifactId>im-java-api</artifactId>
			<version>${im-java-api.version}</version>
		</dependency>
		<dependency>
			<groupId>it.reply</groupId>
			<artifactId>workflow-manager-spring</artifactId>
			<version>${workflow-manager.version}</version>
		</dependency>
		<dependency>
			<groupId>it.reply</groupId>
			<artifactId>reply-commons</artifactId>
			<version>1.3.0-BETA.1</version>
		</dependency>
		<dependency>
			<groupId>alien4cloud</groupId>
			<artifactId>alien4cloud-core</artifactId>
			<version>${alien4cloud.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>it.reply</groupId>
			<artifactId>monitoring-pillar-domain</artifactId>
			<version>${monitoring.pillar.domain.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>

		<!-- Chronos Client -->
		<dependency>
			<groupId>it.infn.ba.indigo</groupId>
			<artifactId>chronos-client</artifactId>
			<version>${chronos-client.version}</version>
		</dependency>

		<dependency>
			<groupId>com.mesosphere</groupId>
			<artifactId>marathon-client</artifactId>
			<version>${marathon-client.version}</version>
		</dependency>
	
		<!-- Graph library -->
		<dependency>
			<groupId>org.jgrapht</groupId>
			<artifactId>jgrapht-core</artifactId>
			<version>1.0.1</version>
		</dependency>

		<dependency>
			<groupId>org.checkerframework</groupId>
			<artifactId>checker-qual</artifactId>
			<version>2.1.8</version>
			<scope>compile</scope>
		</dependency>
		
		<!-- test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- <dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency> -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path-assert</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.springtestdbunit</groupId>
			<artifactId>spring-test-dbunit</artifactId>
			<version>1.2.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.dbunit</groupId>
			<artifactId>dbunit</artifactId>
			<version>2.4.9</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<artifactId>junit</artifactId>
					<groupId>junit</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jta-bitronix</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>3.6.2</version>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<profiles>
		<profile>
			<id>restdocs</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.asciidoctor</groupId>
						<artifactId>asciidoctor-maven-plugin</artifactId>
						<version>1.5.2</version>
						<configuration>
							<sourceDirectory>${basedir}/asciidoc</sourceDirectory>
							<outputDirectory>${basedir}/restdocs</outputDirectory>
						</configuration>
						<executions>
							<execution>
								<id>generate-docs</id>
								<phase>package</phase>
								<goals>
									<goal>process-asciidoc</goal>
								</goals>
								<configuration>
									<backend>html</backend>
									<doctype>book</doctype>
									<attributes>
										<snippets>${snippetsDirectory}</snippets>
									</attributes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>not-eclipse</id>
			<activation>
<!-- 				<property>
					<name>!m2e.version</name>
				</property> -->
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>${maven-compiler-plugin.version}</version>
						<configuration>
							<source>${java.version}</source>
							<target>${java.version}</target>
							<compilerId>javac-with-errorprone</compilerId>
							<forceJavacCompilerUse>true</forceJavacCompilerUse>
						</configuration>
						<dependencies>
							<dependency>
								<groupId>org.codehaus.plexus</groupId>
								<artifactId>plexus-compiler-javac-errorprone</artifactId>
								<version>2.8</version>
							</dependency>
							<!-- override plexus-compiler-javac-errorprone's dependency on Error 
								Prone with the latest version -->
							<dependency>
								<groupId>com.google.errorprone</groupId>
								<artifactId>error_prone_core</artifactId>
								<version>2.0.15</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<pluginManagement>
			<!-- All plugins ordered by shortname (antrun, assembly ...) -->
			<plugins>

				<!-- REFERENCE: https://raymondhlee.wordpress.com/2014/10/25/using-maven-build-number-plugin-to-load-code-revision-details/ -->
				<!-- This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<!-- WARNING: IT IS NOT A REAL PLUGIN !! -->
				<!-- If you are using Eclipse, you also need to update the Maven plugin 
					lifecycle mapping to enable the build number plugin. Otherwise, Eclipse auto 
					build will overwrite the resolved build properties file created by the build 
					number plugin, e.g. in /target/classes, with the one in your source path. 
					Add the below in the pom file as child to the <build> tag: -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>

								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>buildnumber-maven-plugin</artifactId>
										<versionRange>[1.0,)</versionRange>
										<goals>
											<goal>create</goal>
											<goal>create-timestamp</goal>
											<goal>create-metadata</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>

								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.0,)
										</versionRange>
										<goals>
											<goal>
												unpack
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>

								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.mycila</groupId>
										<artifactId>
											license-maven-plugin
										</artifactId>
										<versionRange>
											[1.0,)
										</versionRange>
										<goals>
											<goal>check</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>

				<!-- Build number plugin -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>buildnumber-maven-plugin</artifactId>
					<version>${version.buildnumber.plugin}</version>
					<configuration>
						<!-- Do not check for modification in the SCM -->
						<!-- doCheck and doUpdate actually talk to repository if it's true, 
							Check would check that there are no local changes. Update would update it -->
						<doCheck>false</doCheck>
						<doUpdate>false</doUpdate>

						<!-- Settings for buildnumber:create-metadata goal: -->
						<!-- Make the property file available for jar/war as a classpath resource -->
						<addOutputDirectoryToResources>true</addOutputDirectoryToResources>
						<!-- Deploy to Maven repo -->
						<attach>true</attach>
						<timezone>GMT</timezone>
						<providerImplementations>
							<git>jgit</git>
						</providerImplementations>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.apache.maven.scm</groupId>
							<artifactId>maven-scm-provider-jgit</artifactId>
							<version>1.9.5</version>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<id>get-scm-revision-validate</id>
							<phase>validate</phase>
							<goals>
								<goal>create</goal>
								<goal>create-timestamp</goal>
								<goal>create-metadata</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>com.mycila</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>${license-maven-plugin.version}</version>
					<configuration>
						<header>tools/maven-license-plugin/APACHE-2-header.tmpl</header>
						<includes>
							<include>docker/**</include>
							<include>src/main/java/**</include>
							<include>src/test/java/**</include>
							<include>kubernetes/**</include>
							<include>pom.xml</include>
						</includes>
						<excludes>
                    		<exclude>**/*.war</exclude>
                		</excludes>
                		<useDefaultExcludes>true</useDefaultExcludes>
                		<useDefaultMapping>true</useDefaultMapping>
                		<strictCheck>true</strictCheck>
                		<properties>
                			<owner>${project.organization.name}</owner>
                		</properties>
						<headerDefinitions>
							<headerDefinition>tools/maven-license-plugin/myc-javapkg.xml</headerDefinition>
						</headerDefinitions>
                		<mapping>
                			<java>JavaPackage_style</java>
                		</mapping>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>com.mycila</groupId>
							<artifactId>license-maven-plugin-git</artifactId>
							<version>${license-maven-plugin.version}</version>
						</dependency>
					</dependencies>
				</plugin>
			</plugins>
		</pluginManagement>

		<finalName>orchestrator</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<outputDirectory>${basedir}/docker</outputDirectory>
					<archiveClasses>true</archiveClasses>
					<webResources>
						<resource>
							<directory>${basedir}/src/main/resources</directory>
							<filtering>true</filtering>
							<targetPath>WEB-INF/classes</targetPath>
							<includes>
								<include>**/*.properties</include>
								<include>im-config/*</include>
							</includes>
						</resource>
					</webResources>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${checkstyle-plugin.version}</version>
				<executions>
					<execution>
						<id>checkstyle</id>
						<phase>verify</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<consoleOutput>true</consoleOutput>
							<failsOnError>true</failsOnError>
							<failOnViolation>true</failOnViolation>
							<configLocation>google_checks.xml</configLocation>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>check-license-headers</id>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Set properties containing the scm revision and other build metadata -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<excludedGroups>it.reply.orchestrator.IntegrationTest</excludedGroups>
					<skip>${surefire.skip}</skip>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<includes>
						<include>**/*.java</include>
					</includes>
					<groups>it.reply.orchestrator.IntegrationTest</groups>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Automatic deploy on wildfly -->
			<!-- <plugin> <groupId>org.wildfly.plugins</groupId> <artifactId>wildfly-maven-plugin</artifactId> 
				<version>1.1.0.Alpha7</version> <configuration> <filename>../docker/${project.build.finalName}.${project.packaging}</filename> 
				</configuration> <executions> <execution> <phase>install</phase> <goals> 
				<goal>deploy</goal> </goals> </execution> </executions> </plugin> -->
		</plugins>

		<resources>
			<!-- Filter .properties and replace placeholders (using Maven properties 
				or filtered properties - from the '<build> -> <filters'> section of the POM) -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.properties</include>
				</includes>
			</resource>
			<!-- Also include in the final package the other resources, not being 
				.properties, without filtering them -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>**/*.properties</exclude>
				</excludes>
			</resource>
		</resources>
	</build>
	<reporting>
		<plugins>

			<plugin>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.8</version>
			</plugin>

			<!-- http://maven.apache.org/plugins/maven-checkstyle-plugin/usage.html -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${checkstyle-plugin.version}</version>
				<configuration>
					<consoleOutput>true</consoleOutput>
					<failsOnError>true</failsOnError>
					<failOnViolation>true</failOnViolation>
					<configLocation>google_checks.xml</configLocation>
				</configuration>
				<reportSets>
					<reportSet>
						<reports>
							<report>checkstyle</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.3</version>
				<configuration>
					<reportOutputDirectory>apidocs</reportOutputDirectory>
				</configuration>
			</plugin>
			<!-- Cobertura -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<formats>
						<format>html</format>
						<format>xml</format>
					</formats>
				</configuration>
			</plugin>

		</plugins>
	</reporting>
</project>
